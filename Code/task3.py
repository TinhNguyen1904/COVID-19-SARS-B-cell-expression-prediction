# -*- coding: utf-8 -*-
"""NienLuanCoSoNganh_Task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QNYRntFP5waWS2H_plQRK3R0imHYkIWT
"""

#Cài đặt các thư viện 
!pip install geopandas
!pip install mapclassify

#Import các thư viện có sẳn cần dùng
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns # tạo styles cho biểu đồ
from sklearn.impute import SimpleImputer
import geopandas as gpd
import mapclassify as mpc
import plotly.offline as py
import plotly.express as px
import cufflinks as cf
import seaborn as sns
sns.set(style="white", color_codes=True)
import warnings
warnings.filterwarnings("ignore")

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
pd.options.plotting.backend
#pd.plotting.register_matplotlib_converters()
gpd.plotting.plot_linestring_collection
sns.set()
warnings.filterwarnings('ignore')

#đọc dữ liệu đầu vào
#covid19 = pd.read_csv("covid_19_data.csv", parse_dates=True)
covid19 = pd.read_csv("/content/drive/My Drive/Data Notebooks/covid_19_data.csv")
covid19.head()

#lam sạch dữ liệu
covid19.isnull().sum()[covid19.isnull().sum()>0]

covid19.info()

covid19['ObservationDate'] = pd.DataFrame(covid19['ObservationDate'])
covid19['currentCase'] = covid19['Confirmed'] - covid19['Recovered'] - covid19['Deaths']

replace = ['Dem. Rep. Congo', "Côte d'Ivoire", 'Congo', 'United Kingdom', 'China','Central African Rep.',
          'Eq. Guinea','eSwatini','Bosnia and Herz.', 'S. Sudan', 'Dominican Rep.', 'W. Sahara',
          'United States of America']

name = ['Congo (Kinshasa)', 'Ivory Coast', 'Congo (Brazzaville)', 'UK', 'Mainland China', 
        'Central African Republic', 'Equatorial Guinea', 'Eswatini', 'Bosnia and Herzegovina', 'South Sudan',
       'Dominica', 'Western Sahara','US']

covid_data = covid19.drop(columns=['Province/State'])
covid_data = covid_data.replace(to_replace=name, value=replace)
# kết thúc làm sạch dữ liệu

# hiển thị kết quả khi làm sạch dữ liệu
covid_data.head()

#hiển thị thông tin về các chỉ số phục hồi, xác nhận, số người chết
gb_covid = covid_data.groupby('ObservationDate')[['Confirmed', 'Deaths', 'Recovered', 'currentCase']].agg('sum')
end_date = gb_covid.index.max()

print('========= COVID-19 trên toàn thế giới ==============================')
print("======== Báo cáo cho đến ngày {} ===============\n".format(gb_covid.index.max()))
print('1- Số quốc gia bị ảnh hưởng bởi COVID-19: {}'.format(len(covid_data['Country/Region'].unique())))
print('2- Tổng số đã xác nhận: {}'.format(gb_covid['Confirmed'][gb_covid.index == gb_covid.index.max()].values[-1]))
print('3- Tổng số người chết: {}'.format(gb_covid['Deaths'][gb_covid.index==gb_covid.index.max()].values[-1]))
print('4- Tổng số phục hồi: {}'.format(gb_covid['Recovered'][gb_covid.index ==gb_covid.index.max()].values[-1]))
print('5- Tổng số trường hợp hiện tại: {}'.format(gb_covid['currentCase'][gb_covid.index ==gb_covid.index.max()].values[-1]))
print('============================================================')

#bản đồ của covid19 trên toàn thế giới
world_path_file = gpd.datasets.get_path('naturalearth_lowres') # upload natural data map
world = gpd.read_file(world_path_file)
world.head(3)

geo_merged = world.merge(covid_data[['ObservationDate','Country/Region','Confirmed','Deaths','Recovered','currentCase']] , 
                     left_on='name', right_on='Country/Region')

geo_merged.head()

geo_merged.info()

geo_merged['ObservationDate'] = pd.DataFrame(geo_merged['ObservationDate'])

geo_merged.plot(cmap='cividis_r', column='Confirmed', legend=True, figsize=(15,9), scheme='quantiles', k=6)
plt.title('SARS-Cov 2 trên toàn thế giới')
plt.xlabel('Kinh độ')
plt.ylabel('Vĩ độ')

# tạo bảng thống kê theo ngày
worldwide = geo_merged.groupby(['ObservationDate','continent'])[['Confirmed','Deaths','Recovered','currentCase']].agg('sum').reset_index()
worldwide.head()

#Biểu đồ hiển thị các tỉ lệ ở các lục địa theo thời gian
for c in worldwide.continent.unique():
    surface = worldwide[worldwide.continent==c]
    surface = surface.drop(columns='continent')
    surface.plot(x='ObservationDate',
    title='SARS Cov 2 được xác nhận, hiện tại, phục hồi, tử vong ở {} lục địa theo thời gian'.format(c),
               figsize=(15,5))
    plt.ylabel('cummulative')

#hiển thị số trường hợp dương tính ở mỗi khu vực
daily_case = geo_merged.loc[geo_merged.ObservationDate.isin([end_date])]
pop_size = daily_case.groupby('continent')['pop_est'].agg('sum')
case_size = daily_case.groupby('continent')['Confirmed'].agg('sum')
print('Số trường hợp dương tính trên mỗi quy mô dân số ở mỗi châu lục vào thời điểm hiện tại: {} is:\n {}'.\
      format(end_date, case_size/pop_size))

#gom nhóm giá trị thuộc tính theo khu vực
geospatial = geo_merged.groupby(['ObservationDate','name','continent'])['Confirmed','Deaths','Recovered','currentCase'].agg('sum')

geospa = geospatial.reset_index()

geospa.head()

def determinate_beta_gamma_delta(data=None):
  beta = []
  gamma = []
  delta = []

  for t in range(len(data.ObservationDate.values)):
        
        x = data.Confirmed.iloc[t]
        y = data.Deaths.iloc[t]
        z = data.Recovered.iloc[t]
        w = data.currentCase.iloc[t]

        
        if x == 0.0:
            beta.append(0)
            gamma.append(0)
            delta.append(0)
        else:
            beta_t = w/x
            gamma_t = z/x
            delta_t = y/x
            
            beta.append(beta_t)
            gamma.append(gamma_t)
            delta.append(delta_t)

  return np.array(beta), np.array(gamma), np.array(delta)

transmission, recovery, fatality = determinate_beta_gamma_delta(data=geospa)

#hiển thị giá trị
geospa['beta'] = transmission
geospa['gamma'] = recovery
geospa['delta'] = fatality

geospa.head()

#Gom nhóm giá trị beta, gamma, delta theo ngày và khu vực
rate_map = geospa.groupby(['ObservationDate','continent'])[['beta','gamma','delta']].agg('mean').reset_index()
rate_map.head()

# Biểu đồ tốc độ truyền, phục hồi ở các lục địa
for c in rate_map.continent.unique():
    surface = rate_map[rate_map.continent==c]
    surface = surface.drop(columns='continent')
    surface.plot(x='ObservationDate',
    title='Tốc độ truyền SARS Cov 2, tốc độ phục hồi, tốc độ đồng bằng ở {} lục địa theo thời gian'.format(c),
                 figsize=(15,5))
    plt.ylabel('means rate')

#Biểu đồ kiểm soát covid ở Oceania
worldwide[worldwide.continent=='Oceania'].plot(x='ObservationDate',  figsize=(15,5),
    title='Tình hình kiểm soát SARS Cov 2 ở {} lục địa theo thời gian'.format('Oceania'),
                                              )
plt.ylabel('cummulative')

#Biểu diễn biểu đồ ở Oceania
rate_map[rate_map.continent=='Oceania'].plot(x='ObservationDate', 
title='Tốc độ truyền SARS Cov 2, tốc độ phục hồi, tốc độ đồng bằng ở {} lục địa theo thời gian'.format('Oceania'),
                                                                        figsize=(15,5))
plt.ylabel('tỉ lệ')

#tìm R0 ở châu đại dương
oceania =  rate_map[rate_map.continent=='Oceania']

oceania['R0'] = oceania.beta.values/(oceania.gamma.values + oceania.delta.values)

oceania.plot(x='ObservationDate', y='R0',
             title= 'Tỷ lệ tài hiện theo thời gian ở Châu Đại Dương',
              figsize=(15,5))
plt.ylabel('ratio')

#tìm R0 ở Africa
africa = rate_map[rate_map.continent=='Africa']
africa ['R0'] = africa.beta.values/(africa.gamma.values + africa.delta.values)
africa.plot(x='ObservationDate', y='R0', 
             title='Tỷ lệ tài hiện theo thời gian ở Africa',
             figsize=(15,5))
plt.ylabel('ratio')

#hàm tìm R0
def find_R0(data=None):
    return data.beta.values/(data.gamma.values + data.delta.values)

#Lấy ví dụ ở trung quốc điển hình
china = geospa[geospa.name=='China']
china.head()

# biểu đồ tình hình dịch bệnh ở Trung Quốc
china[['ObservationDate','Confirmed','Deaths','Recovered','currentCase']].plot(x='ObservationDate', 
        title='SARS Cov 2 ở Trung Quốc', figsize=(15,5))
plt.ylabel('Cummulative')

# xem xét các thông số beta, gamma, delta 
china[['ObservationDate','beta','gamma','delta']].plot(x='ObservationDate', 
                                                       title='SARS Cov 2 với các thông số quan trọng',
                                             figsize=(15,5))
plt.ylabel('rate')

# Tìm R0
china['R0'] = find_R0(data=china)
china.plot(x='ObservationDate', y = 'R0', title='Tỷ số R0 ở Trung Quốc',
            figsize=(15,5))
plt.ylabel('ratio')

#toc do tang truong
#đọc dữ liệu vào và mở rộng toàn bộ cột và dòng
pd.set_option('display.max_rows', 10000)
pd.set_option('display.max_colwidth', 150)
#media = pd.read_csv('COVID 19 Containment measures data.csv')
media = pd.read_csv("/content/drive/My Drive/Data Notebooks/COVID 19 Containment measures data.csv")
#covid_19 = pd.read_csv('covid_19_data.csv')
#covid_19 = pd.read_csv("/content/drive/My Drive/Data Notebooks/covid_19_data.csv")

#hiển thị dữ liệu
media.head()

#dữ liệu sau khi xóa các cột không cần thiết
policy = media[['Country','Date Start','Description of measure implemented']]\
.sort_values('Date Start',ascending=True)

policy.head()

# Hiển thị tên các quốc gia khác nhau trong tập dữ liệu
policy.Country.unique()

covid19.head()

#gom nhóm các giá trị
covid19 = covid19.groupby(['Country/Region', 'ObservationDate'])[['Confirmed', 'Deaths', 'Recovered']].agg('sum')
covid19['CurrentConfirmed'] = covid19['Confirmed'] - covid19['Recovered'] - covid19['Deaths']
covid19.head()

country = covid19.reset_index()
country.info()

#hiển thị thông tin các giá trị bằng bảng
country.head(3)

country.loc[:, 'ObservationDate'] = pd.to_datetime(country.loc[:, 'ObservationDate'])
country.loc[:, 'Confirmed'] = pd.to_numeric(country.loc[:, 'Confirmed'], errors='coerce')
country.loc[:,'Recovered'] = pd.to_numeric(country.loc[:,'Recovered'], errors='coerce')
country.loc[:,'Deaths'] = pd.to_numeric(country.loc[:,'Deaths'], errors='coerce')
policy.loc[:, 'Date Start'] = pd.to_datetime(policy.loc[:, 'Date Start'])

country['Country/Region'].unique()

#lập mảng thông tin
def growth_rate(data=None):
    x = []
    x.append(0)
    for i in range(data.shape[0]-1):
        a = data.iloc[i+1]-data.iloc[i]
        if data.iloc[i] == 0:
            v = 0.0
        else:
            v = a/data.iloc[i]
        #v=v*100
        x.append(v)
        
    return np.array(x)

def compute_growth_rate(data=None):
    
    for c in ['Confirmed', 'Recovered', 'Deaths','CurrentConfirmed']:
        r = 'growth_rate_{}'.format(c)
        data.loc[:,r] = growth_rate(data.loc[:,c])
        
    return data.copy()

china = policy[policy.Country == 'China'].sort_values(by=['Date Start'])
mainland_china = country[country['Country/Region'] == 'Mainland China']

# xem ngày chính sách bắt đầu ở Trung Quốc
china['Date Start'].unique()

#bảng các trường hợp xuất hiện ở Trung Quốc theo thời gian
china[china['Date Start'] < '2020-02-22'].style.set_properties(**{'background-color': 'yellow',
                            'color': 'blue',
                            'border-color': 'lawngreen'})

gr_china = compute_growth_rate(mainland_china)

cols = list(set(gr_china.columns) - set(['Confirmed', 'Deaths', 'Recovered','Country/Region','CurrentConfirmed',
                                        'growth_rate_CurrentConfirmed']))
icols = ['ObservationDate', 'Confirmed', 'Recovered', 'Deaths']

#bảng các quyết định đưa ra chóng covid
china[china['Date Start'] >= '2020-02-22'].style.set_properties(**{'background-color': 'yellow',
                            'color': 'red',
                            'border-color':'red'})

#biểu đồ hiển thị hiệu quả của các biện pháp ngăn covid
mainland_china[cols].plot(x='ObservationDate', figsize=(15,5))
plt.title('Hiệu quả của các biện pháp ngăn chặn và giảm thiểu đối với tốc độ tăng trưởng đã được xác nhận, phục hồi,tử vong ở Trung Quốc ')
plt.ylabel('growth rate')

#hiển thị tỉ lệ tác động của các biện pháp
mainland_china.plot(x='ObservationDate', y = 'growth_rate_CurrentConfirmed', figsize=(15,5))
plt.hlines(0, mainland_china.ObservationDate.min(), mainland_china.ObservationDate.max(), 
           linestyles='dashdot', colors='black',
              label='limit (relation between growth rate and R0)')
plt.title('Tác động của các biện pháp ngăn chặn và giảm thiểu đối với tốc độ tăng trưởng hiện nay đã được khẳng định ở Trung Quốc')
plt.legend(loc='best')
plt.ylabel('growth rate')

#biểu đồ hiển thị tình trạng kiểm soát dịch bênh ở Trung Quốc
mainland_china[['ObservationDate','Confirmed','Recovered', 'Deaths']].plot(x='ObservationDate', figsize=(15,5))
plt.title('Kiểm soát tình trạng dịch bệnh ở Trung Quốc')

#Do tuoi nhiem benh
#đọc dữ liệu vào và hiển thị dữ liệu
#case_data = pd.read_csv("Case.csv")
case_data = pd.read_csv("/content/drive/My Drive/Data Notebooks/Case.csv")
case_data.head()

#patient_info = pd.read_csv("PatientInfo.csv")
patient_info = pd.read_csv("/content/drive/My Drive/Data Notebooks/PatientInfo.csv")
patient_info.head()

case_data.info()

#lập biểu đồ các tỉnh có xác nhận covid
provinces = case_data.groupby('province')['confirmed'].sum().reset_index()
most_provinces = provinces.sort_values('confirmed', ascending = False)[0:5]

fig = px.bar(most_provinces,x="province", y="confirmed", barmode='group')
fig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',
                  marker_line_width=1.5, opacity=0.5, width = 0.3)
fig.update_layout(title_text='Các tỉnh có các trường hợp được xác nhận')
fig.show()

#biểu đồ có ít người bị covid
least_provinces = case_data.groupby('province')['confirmed'].sum().reset_index()
least_provinces = least_provinces.sort_values('confirmed')[0:5]

fig = px.bar(least_provinces,x="province", y="confirmed", barmode='group')
fig.update_traces(marker_color='rgb(158,202,225)', marker_line_color='rgb(8,48,107)',
                  marker_line_width=1.5, opacity=0.5, width = 0.3)
fig.update_layout(title_text='Các tỉnh có ít ca bệnh được xác nhận nhất')
fig.show()

#biểu đồ các trường hợp nhiểm bệnh được xác nhận
infection_cases = case_data.groupby('infection_case')['confirmed'].sum().reset_index()
infection_cases = infection_cases.sort_values('confirmed', ascending = False)[0:7]

fig = px.pie(infection_cases, values = 'confirmed', names = 'infection_case', title = "Các trường hợp nhiễm bệnh với các trường hợp được xác nhận")
fig.update_traces(rotation=90, pull=0.05, textinfo="percent+label")
fig.show()

patient_info.info()

# biểu đồ xây dựng xem nam và nữ giới bị nhiễm covid như thế nào
#Đối với cột giới tính, khoảng 200 hàng có giá trị Null. Thay vì thay thế chúng và gây ra phân phối thiên lệch, chúng tôi đã quyết định
#loại bỏ các giá trị Null bây giờ.

patient_info = patient_info[patient_info['sex'].notna()]

sex_count = patient_info.groupby('sex')['patient_id'].count().reset_index()

fig =  px.pie(sex_count, names='sex', values='patient_id', title='Các trường hợp được xác nhận giữa nam và nữ')
fig.update_traces(pull=0.05, textinfo='percent+label')
fig.show()

#xây dựng biểu đồ thời gian cho nhóm tuổi dễ nhiễm covid
patient_info = patient_info[patient_info['age'].notna()]

age_count = patient_info.groupby('age')['patient_id'].count().reset_index()

fig =  px.line(age_count, x="age", y="patient_id", title='Nhóm tuổi dễ mắc bệnh')
fig.show()

#biểu đồ nhóm tuổi tử vong 
deceased_count = patient_info.groupby('age')['deceased_date'].count().reset_index()

fig =  px.line(deceased_count, x="age", y="deceased_date", title='Nhóm tuổi có số tử vong')
fig.show()

#biểu đồ nhóm tuổi phục hồi
recovery_count = patient_info.groupby('age')['released_date'].count().reset_index()

fig =  px.line(recovery_count, x="age", y="released_date", title='Nhóm tuổi đã phục hồi')
fig.show()

#tốc độ giữa các tình trạng bệnh
patient_state = patient_info.groupby(['state', 'age'])['patient_id'].count().reset_index()
patient_state = patient_state.sort_values('age')

fig = px.line(patient_state, x='age', y='patient_id', color='state',title='Tốc độ giữa các tình trạng bệnh') 
fig.show()