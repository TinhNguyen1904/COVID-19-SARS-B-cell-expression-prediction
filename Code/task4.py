# -*- coding: utf-8 -*-
"""NienLuanCoSoNganh_Task4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hYHI9uTutXLsOPI4eQi2ecBx5SbkudyM
"""

#import thư viện
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
import numpy as np
import seaborn as sns
from datetime import datetime

covid19=pd.read_csv('/content/drive/My Drive/Data Notebooks/covid_19_data.csv')
# Chuyển đổi ngày tháng thành datetime
covid19['ObservationDate']=pd.to_datetime(covid19['ObservationDate'])
covid19.head()

#Biểu đồ diễn biến các trường hợp từ ngày 22/1/2020
df=covid19.groupby(['ObservationDate'])[['Confirmed','Recovered','Deaths']].sum()
plt.figure(figsize=(12,7))
plt.title('Các trường hợp của Novel covid_19 kể từ ngày 22 tháng 1 năm 2020',fontsize=30)
plt.xlabel('Ngày',fontsize=20)
plt.ylabel('Số trường hợp',fontsize=20)
plt.plot(df.index,df['Confirmed'],label='Infected',linewidth=3)
plt.plot(df.index,df['Recovered'],label='Recovered',linewidth=3,color='green')
plt.plot(df.index,df['Deaths'],label='Deaths',linewidth=3,color='red')
plt.bar(df.index,df['Confirmed'],alpha=0.2,color='c')
plt.xticks(fontsize=15,rotation=90)
plt.yticks(fontsize=15)
plt.style.use('ggplot')
plt.legend()

#Biểu đồ các trường hợp ở ấn độ
df1=covid19.groupby(['Country/Region'])[['ObservationDate','Confirmed','Recovered','Deaths']]
india_cases=df1.get_group('India')
plt.figure(figsize=(12,8))
plt.title('Trường hợp của Novel covid_19 ở Ấn Độ',fontsize=20)

plt.ylabel('Số trường hợp',fontsize=10)
plt.xlabel('Ngày',fontsize=10)
plt.plot(india_cases['ObservationDate'],india_cases['Confirmed'],'-o',linewidth=1,markersize=1,mfc='white',mec='green')
plt.xticks(rotation=15)
plt.grid()

#Top 5 quốc gia có số ca tử vong được xác nhận, phục hồi và tử vong
country=covid19.groupby(['Country/Region'])[['Confirmed','Recovered','Deaths']].sum()
top_5=country.nlargest(5,['Confirmed'])
plt.figure(figsize=(15,9))
plt.subplot(311)
plt.title('Top 5 quốc gia có số ca tử vong được xác nhận, phục hồi và tử vong',fontsize=20)
plt.barh(top_5.index,top_5['Confirmed'],color='blue')
plt.yticks(fontsize=20)
plt.xlabel('Confirmed',fontsize=20)
plt.subplot(312)
plt.barh(top_5.index,top_5['Deaths'],color='red')
plt.yticks(fontsize=20)
plt.xlabel('Deaths',fontsize=20)
plt.subplot(313)
plt.barh(top_5.index,top_5['Recovered'],color='green')
plt.yticks(fontsize=20)
plt.xlabel('Recovered',fontsize=20)

#Top 10 quốc gia có số ca tử vong được xác nhận, hồi phục và tử vong trung bình
rank=country.nlargest(179,['Confirmed']).head(10)
confirmed=[]
recovered=[]
death=[]
for i in rank.index:
    df1=covid19[covid19['Country/Region']==i]
    confirmed.append(df1['Confirmed'].mean())
    recovered.append(df1['Recovered'].mean())
    death.append(df1['Deaths'].mean())
plt.figure(figsize=(15,9))

plt.subplot(311)
plt.title('Top 10 quốc gia có số ca tử vong được xác nhận, hồi phục và tử vong trung bình',fontsize=20,color='green')
plt.plot(rank.index,confirmed,'-o',mfc='black')
plt.ylabel('Confirmed',fontsize=20)
plt.grid()
plt.subplot(312)
plt.plot(rank.index,recovered,'-o',color='green',mfc='black')
plt.ylabel('Recovered',fontsize=20)
plt.grid()
plt.subplot(313)
plt.plot(rank.index,death,'-o',color='red',mfc='black')
plt.ylabel('Death',fontsize=20)
plt.grid()

#Phân phối các trường hợp đã xác nhận
rank1=country.nlargest(179,['Confirmed']).head(20)
confirmed_perc=[]
for i in rank1['Confirmed']:
    confirmed_perc.append(i/rank1['Confirmed'].sum())
plt.figure(figsize=(16,10))    
plt.title('Phân phối các trường hợp đã xác nhận',fontsize=20)    
plt.pie(confirmed_perc,autopct='%1.1f%%')
plt.legend(rank1.index,loc='best')
plt.show()

symptoms={'symptom':['Fever',
        'Dry cough',
        'Fatigue',
        'Sputum production',
        'Shortness of breath',
        'Muscle pain',
        'Sore throat',
        'Headache',
        'Chills',
        'Nausea or vomiting',
        'Nasal congestion',
        'Diarrhoea',
        'Haemoptysis',
        'Conjunctival congestion'],'percentage':[87.9,67.7,38.1,33.4,18.6,14.8,13.9,13.6,11.4,5.0,4.8,3.7,0.9,0.8]}

symptoms=pd.DataFrame(data=symptoms,index=range(14))
symptoms

#Phân bố các triệu chứng
plt.figure(figsize=(15,9))
plt.title('Phân bố các triệu chứng',fontsize=20)    
plt.pie(symptoms['percentage'],autopct='%1.1f%%')
plt.legend(symptoms['symptom'],loc='best')
plt.show()

#Xây dựng mô hình
covid19['Country/Region']=covid19['Country/Region'].astype('str')
covid19['Province/State']=covid19['Province/State'].astype('str')
covid19['day']=covid19['ObservationDate'].dt.day
covid19['month']=covid19['ObservationDate'].dt.month
lbl=preprocessing.LabelEncoder()
for c in ['Province/State','Country/Region']:
    lbl.fit(covid19[c].unique())
    covid19[c]=lbl.transform(covid19[c])
x=covid19.drop(['Confirmed','SNo','Last Update','ObservationDate'],1)
y=covid19['Confirmed']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

model=LinearRegression()
model.fit(x_train,y_train)

y_pred=model.predict(x_test)
from sklearn.metrics import r2_score

print(' R2 Score   : ',r2_score(y_test, y_pred))

#DAI DICH PHAT TRIEN TREN THE GIOI
covid_open_line = pd.read_csv('/content/drive/My Drive/Data Notebooks/COVID19_open_line_list.csv')
#Xóa các cột trống
drop_list = [i for i in covid_open_line.columns if 'Unnamed' in i] 
covid_open_line = covid_open_line.drop(columns = drop_list)
covid_open_line.head()

covid_open_line.info()

covid_line = pd.read_csv('/content/drive/My Drive/Data Notebooks/COVID19_line_list_data.csv')
#Xóa các cột trống
drop_list = [i for i in covid_line.columns if 'Unnamed' in i] 
covid_line = covid_line.drop(columns = drop_list)
covid_line.head()

len(covid_line.symptom.unique())

covid_line.info()

covid19 = pd.read_csv('/content/drive/My Drive/Data Notebooks/covid_19_data.csv')
covid19.head()

#đại dịch đang phát triển trên thế giới
df = covid19.groupby('ObservationDate').agg({'Confirmed':'sum', 'Deaths':'sum', 'Recovered':'sum'}).reset_index()

x=df.ObservationDate.values
y=[df.Confirmed.values, df.Deaths.values, df.Recovered.values]
 
# Biểu đồ
pal = sns.color_palette("Set1")

plt.stackplot(x,y, labels=['Confirmed','Deaths','Recovered'], colors=pal, alpha=0.7)
plt.legend(loc='upper left')
plt.show()

"""Chúng ta có thể thấy các trường hợp được xác nhận vẫn đang tăng lên. Chúng ta cũng có thể thấy sự gia tăng các trường hợp được phục hồi khi những người ăn xin đang chữa bệnh và sự gia tăng số người chết khi có nhiều người bị nhiễm bệnh. Hãy xem thế nào là Trung Quốc (điểm xuất phát)."""

#Tỷ lệ tử vong, phục hồi, xác nhận của Trung Quốc
df_china = covid19[covid19['Country/Region'] == 'Mainland China'].groupby('ObservationDate').agg({'Confirmed':'sum', 'Deaths':'sum', 'Recovered':'sum'}).reset_index()

x=df_china.ObservationDate.values
y=[df_china.Confirmed.values, df_china.Deaths.values, df_china.Recovered.values]
 
# Plot
pal = sns.color_palette("Set1")

plt.stackplot(x,y, labels=['Confirmed','Deaths','Recovered'], colors=pal, alpha=0.7)
plt.legend(loc='upper left')
plt.show()

"""Chúng ta có thể thấy rằng ở Trung Quốc hầu như không có ca bệnh mới và những ca bệnh đã được thu hồi hầu như giống như đã xác nhận.

Hãy xem tỷ lệ hồi phục và tử vong trên toàn cầu và ở Trung Quốc như thế nào
"""

#So sánh giữa Trung Quốc với thế giới
df['recovered_ratio'] = df['Recovered'] / df['Confirmed']
df['death_ratio'] = df['Deaths'] / df['Confirmed']

sns.lineplot(x="ObservationDate", y="recovered_ratio", data=df)
sns.lineplot(x="ObservationDate", y="death_ratio", data=df)

df_china['recovered_ratio'] = df_china['Recovered'] / df_china['Confirmed']
df_china['death_ratio'] = df_china['Deaths'] / df_china['Confirmed']

sns.lineplot(x="ObservationDate", y="recovered_ratio", data=df_china)
sns.lineplot(x="ObservationDate", y="death_ratio", data=df_china)

"""Chúng ta có thể thấy rằng Trung Quốc có tỷ lệ thu hồi là 80% và đang tăng lên, có nghĩa là họ đã kiểm soát được mức độ lây lan. Tỷ lệ phục hồi trên toàn cầu đang tăng lên nhưng các quốc gia mới bị nhiễm bệnh có thể là lý do đằng sau sự suy giảm khả năng phục hồi mới này. Tỷ lệ tử vong ổn định khoảng 3% .

Hãy xem liệu thời gian kể từ trường hợp đầu tiên và sự phục hồi có tương quan không
"""

#Tương quan giữa thời gian từ ngày đầu tiên và sự phục hồi
covid19['ObservationDate'] = pd.to_datetime(covid19['ObservationDate'])
covid_start = covid19.groupby(['Country/Region', 'Province/State'])['ObservationDate'].min().reset_index()
covid_start.columns = ['Country/Region', 'Province/State', 'FirstObservation']
covid19 = covid19.merge(covid_start, on = ['Country/Region', 'Province/State'])

covid19['TimeSinceFirst'] = (covid19['ObservationDate'] - covid19['FirstObservation']).dt.days
covid19['RecoveredRatio'] = covid19['Recovered'] / covid19['Confirmed']
covid19['DeathsRatio'] = covid19['Deaths'] / covid19['Confirmed']

covid19[['Confirmed', 'TimeSinceFirst', 'RecoveredRatio', 'DeathsRatio']].corr()

(covid19.loc[covid19['ObservationDate'] == '2020-03-14', 'TimeSinceFirst']).hist()

"""Chúng ta có thể thấy rằng thời gian kể từ trường hợp đầu tiên và sự phục hồi có mối tương quan và nhiều khu vực cách trường hợp đầu tiên ít hơn một tuần. Vì vậy thời gian lan truyền là một yếu tố quan trọng. Hãy xem nếu chúng ta có một mẫu"""

covid19['WeeksSinceFirst'] = round(covid19['TimeSinceFirst'] / 7)
covid_week = covid19.groupby(['Country/Region', 'Province/State', 'WeeksSinceFirst'])['Confirmed'].max().reset_index(name='LastValueWeek')
#covid_mean = covid_week.groupby(['WeeksSinceFirst']).agg({'max': [np.mean, np.std]}).reset_index()
#covid_mean.columns = ['WeeksSinceFirst', 'mean', 'std']
sns.lineplot(x="WeeksSinceFirst", y="LastValueWeek", data=covid_week)

"""Chúng ta có thể thấy rằng các trường hợp tiến hóa không đồng đều ở những nơi khác nhau, chủ yếu là do quy mô dân số, số đo lưu vực, v.v. mà chúng ta không thể đo lường bằng dữ liệu.

Một yếu tố quan trọng khác là tuổi tác. Bệnh nặng hơn ở người già
"""

def clean_age(x):
    try:
        x = int(x)
    except ValueError:
        x = np.nan
    
    return x

#Xem xét độ tuổi
covid_open_line.age.apply(clean_age).hist()

"""Như chúng ta có thể thấy, có rất ít trường hợp trong độ tuổi từ 0 đến 20, cũng như nhiều hơn từ 40 đến 60. Thật không may, chúng tôi chỉ có 14 nghìn trường hợp trong tập dữ liệu dòng mở, vì vậy chúng tôi không thể sử dụng độ tuổi hiện tại."""

#DU DOAN SO NGUOI TU VONG
#đọc tập tin
cor_inf = pd.read_csv('/content/drive/My Drive/Data Notebooks/time_series_covid_19_confirmed.csv')
cor_inf.head(5)

#xóa vĩ độ dài và cột tỉnh / bang
cor_inf.columns

cor_inf.drop(labels = ['Province/State','Lat', 'Long'],axis = 1, inplace= True)

cor_inf.head(20)

cor_inf.shape

cor_inf['Country/Region'].value_counts()

#nhóm theo dữ liệu dựa trên quốc gia vì tên quốc gia được lặp lại nhiều lần
cor_inf = cor_inf.groupby(['Country/Region']).sum()
cor_inf.loc['China'].tail(5)

#định hình lại dữ liệu theo phân tích chuỗi thời gian
cor_inf_re = pd.DataFrame()
for i in range(0,len(cor_inf)):
    cor_inf_re[cor_inf.index[i]] = cor_inf.iloc[i].values

type(cor_inf.index[0])

cor_inf_re.index = cor_inf.columns[:]
cor_inf_re.head(5)

def total_infected_sum():
    count = []
    for i in range(0,len(cor_inf_re)):
        count.append(sum(cor_inf_re.iloc[i].values))
    return count

cor_inf_re['Total infected'] = total_infected_sum()

cor_inf_re.tail(5)

def parser(date):
    date = datetime.strptime(date,'%m/%d/%y')
    date  = str(date.day) + '-' + str(date.month) + '-' + str(date.year)
    print(date)
    return datetime.strptime(date,'%d-%m-%Y')

#chuyển đổi str thành datetime trong chỉ mục
timestamp = []
for i in range(0,len(cor_inf_re)):
    timestamp.append(parser(cor_inf_re.index[i]))
cor_inf_re.index = timestamp

cor_inf_re.to_csv('covid_19_confirmed.csv')

#chuẩn bị cho chuỗi thời gian
infected_people = cor_inf_re['Total infected']

#cột bị nhiễm mỗi ngày
diff = []
diff.append(cor_inf_re['Total infected'][0])
for i in range(0,len(cor_inf_re['Total infected']) - 1):
    diff.append(cor_inf_re['Total infected'][i+1] - cor_inf_re['Total infected'][i])

cor_inf_re['Infected_per_Day'] = diff

#hình dung
plt.xlabel('dates')
plt.ylabel('infected people')
infected_people.plot(figsize = (11,5),marker='o')
plt.legend()

#kiểm tra phần thống kê của dữ liệu
infected_people.describe()

#kiểm tra xem có xu hướng hoặc tính thời vụ
from statsmodels.tsa.seasonal import seasonal_decompose
result = seasonal_decompose(infected_people)

result.trend.plot(figsize=(12,4))
