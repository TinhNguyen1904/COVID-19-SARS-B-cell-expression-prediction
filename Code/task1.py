# -*- coding: utf-8 -*-
"""NienLuanCoSoNganh_Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vxe0xxgQdfvEOt6B2a36LmzTGJd8lIGp
"""

#cài đặt thư viện
import numpy as np
import pandas as pd

#đọc và hiển thị dữ liệu
data=pd.read_csv('/content/drive/My Drive/Data Notebooks/input_bcell.csv')
data.head()

# kiểm tra dữ liệu
data.isnull().sum()

#loại bỏ các cột không cần thiết
data_drop = data.drop(['parent_protein_id','protein_seq','peptide_seq'],axis = 1)
data_drop.head()

data_drop['target'].value_counts()/len(data_drop)*100.0

import seaborn as sn
sn.countplot(data=data_drop,x = 'target',palette='plasma')
# 1 la dương tính, 0 là âm tính

# Commented out IPython magic to ensure Python compatibility.
#hiển thị dữ liệu tổng quan
import seaborn as sn
import matplotlib.pyplot as plt
import plotly.express as px
# %matplotlib inline
plt.figure(figsize=(16,9))
sn.heatmap(data_drop.corr(),annot=True,linecolor='blue',linewidths=3,cmap = 'plasma')

#hiển thị dữ liệu
data_drop.describe()

#tính thêm giá trị peptide_length
data_drop['peptide_length']=data_drop['end_position'] - data_drop['start_position'] + 1
data_drop['peptide_length'].value_counts()/len(data_drop)*100

#hiển thị giá trị thuộc tính lên biểu đồ
#data_drop.hist(figsize=(15,15))
#plt.show()

x=data_drop.drop(columns='target')
y=data_drop['target']

#các thuộc tính quan trọng
from sklearn.ensemble import ExtraTreesClassifier
r = ExtraTreesClassifier(random_state=0)
r.fit(x,y)
feature_importance = r.feature_importances_
feature_importance_normalized = np.std([tree.feature_importances_ for tree in 
                                        r.estimators_], 
                                        axis = 0)

#hiển thị các thuộc tính quan trọng lên biểu đồ
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
plt.figure(figsize=(10,5))
sns.barplot(feature_importance_normalized,x.columns,color='green') 
plt.xlabel('Feature Labels') 
plt.ylabel('Feature Importances') 
plt.title('Comparison of different Feature Importances') 
plt.show()

#phân tích dữ liệu các thuộc tính dựa trên biểu đồ
features=["chou_fasman","emini","kolaskar_tongaonkar","parker","peptide_length","isoelectric_point","aromaticity","hydrophobicity","stability"]
plt.figure(figsize=(20,20))
plt.subplots_adjust(hspace=2.0)
j=1
for i in features:
    plt.subplot(4,5,j)
    sns.distplot(data_drop[i])
    j+=1

#hiển thị từng thuộc tính riêng biệt
#start_position
sns.set_style('whitegrid')
plt.figure(figsize=(30,30))
sns.catplot(y='start_position',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#end_position
sns.set_style('whitegrid')
plt.figure(figsize=(30,30))
sns.catplot(y='end_position',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#chou_fasman
sns.set_style('whitegrid')
plt.figure(figsize=(30,30))
sns.catplot(y='chou_fasman',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#emini
sns.set_style('whitegrid')
plt.figure(figsize=(30,30))
sns.catplot(y='emini',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#kolaskar_tongaonkar
sns.set_style('whitegrid')
plt.figure(figsize=(30,30))
sns.catplot(y='kolaskar_tongaonkar',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#parker
plt.figure(figsize=(30,30))
sns.catplot(y='parker',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#isoelectric_point
sns.set_style('whitegrid')
plt.figure(figsize=(30,30))
sns.catplot(y='isoelectric_point',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#aromaticity
plt.figure(figsize=(30,30))
sns.catplot(y='aromaticity',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#hydrophobicity
plt.figure(figsize=(30,30))
sns.catplot(y='hydrophobicity',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#stability
plt.figure(figsize=(30,30))
sns.catplot(y='stability',x='peptide_length',data=data_drop,ci=None,col='target',sharey=False)

#các thuộc tính train
x.head()

#thuộc tính nhãn
X=data_drop.drop(columns='target')
Y=data_drop['target']

#xây dựng model
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.469,random_state=42)

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

#tính độ chính xác Cây quyết đinh, hồi quy, rừng ngẫu  nhiên
def models(x_train,y_train):
  #Logistic Regression Model
  from sklearn.linear_model import LogisticRegression
  log=LogisticRegression(random_state=42)
  log.fit(x_train,y_train)
  
  #Decision Tree
  from sklearn.tree import DecisionTreeClassifier
  tree=DecisionTreeClassifier(criterion='entropy',random_state=0)
  tree.fit(x_train,y_train)
  
  #Random Forest Classifier
  from sklearn.ensemble import RandomForestClassifier
  forest = RandomForestClassifier(n_estimators=15,criterion="entropy",random_state=0)
  forest.fit(x_train,y_train)

  #Print the models accuracy on the training data
  print("Logistic Regression Training Accuracy:",log.score(x_train,y_train))
  print("Decision Tree Classifier Training Accuracy:",tree.score(x_train,y_train))
  print("Random Forest Classifier Training Accuracy:",forest.score(x_train,y_train))
  
  return log,tree,forest

#Kết quả các mô hình
model = models(x_train,y_train)

from sklearn.model_selection import train_test_split
X_train,X_valid,Y_train,Y_valid=train_test_split(X,Y,stratify=Y,test_size=0.2,random_state=0)

#chuẩn hóa dữ liệu
from sklearn.preprocessing import MinMaxScaler
d=MinMaxScaler()
d.fit_transform(X_train,Y_train)

d.transform(X_valid)

#chạy vòng lập tìm giải thuật tốt nhất
for f in range(0,10):
  X_train,X_valid,Y_train,Y_valid= train_test_split(x,y,test_size = 1/3, random_state = 8+f)
  #Decision Tree
  from sklearn.tree import DecisionTreeClassifier
  tree=DecisionTreeClassifier(criterion='entropy',random_state=0,min_samples_split=2+f, max_depth=7+f)
  tree.fit(x_train,y_train)
  #Random Forest
  from sklearn.ensemble import RandomForestClassifier
  forest = RandomForestClassifier(n_estimators=15,criterion="entropy",random_state=0,min_samples_split=2+f, max_depth=7+f)
  forest.fit(x_train,y_train)
  print("Decision Tree Classifier Training Accuracy:",tree.score(x_train,y_train))
  print("Random Forest Classifier Training Accuracy:",forest.score(x_train,y_train))
  print('\n')

#thực hiện giải thuật rừng ngẫu nhiên
from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators=15,criterion="entropy",random_state=0)
forest.fit(x_train,y_train)

lg_pred=forest.predict(X_valid)
lg_pred

#độ chính xác
from sklearn.metrics import roc_auc_score
roc_auc_score(lg_pred,Y_valid)

#dự đoán của tập dữ liệu xác thực
predictions=pd.DataFrame(lg_pred,columns=['validation_pred'])
predictions.head()

predictions.value_counts()/len(data_drop)*100

#dự đoán trên tập dữ liệu covid
data_covid=pd.read_csv('/content/drive/My Drive/Data Notebooks/input_covid.csv')
data_covid.head()

data_covid.drop(columns=['parent_protein_id','protein_seq','peptide_seq'],inplace=True)
data_covid

data_covid.isnull().sum()

data_covid['length']=data_covid['end_position']-data_covid['start_position'] + 1
d.transform(data_covid)
#data_drop['peptide_length']=data_drop['end_position'] - data_drop['start_position'] + 1
#data_covid['length'].value_counts()/len(data_drop)*100

y_pred=forest.predict(data_covid)
y_pred

#dự đoán trên tập dữ liệu test
y_pred=pd.DataFrame(y_pred,columns=['test_pred'])
y_pred.head()

y_pred.value_counts()/len(data_covid)*100
